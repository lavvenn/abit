from aiogram import Router, F
from aiogram.filters.command import Command, CommandStart
from aiogram.types import Message
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from keyboards.reply import main_kb

from states import adding, chek

from keyboards.builder import by_buttons_kb

from db.requests import get_applicant_by_last_name

GREATING_MESSAGE = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüéâ
–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö üóÇÔ∏è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üì∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤.
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –±—ã—Å—Ç—Ä–æ ‚ö° –∏ —É–¥–æ–±–Ω–æ üõ†Ô∏è –≤–Ω–µ—Å—ë—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìã –≤ —Å–∏—Å—Ç–µ–º—É –≤–∞—à–µ–≥–æ –≤—É–∑–∞ üéì.
–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üëâ, –∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—â–µ ‚úÖ –∏ –±—ã—Å—Ç—Ä–µ–µ üöÄ!
–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚ùì ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ üí¨, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å ü§ù.
"""

router = Router()


@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(GREATING_MESSAGE, reply_markup=main_kb)


@router.message(F.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞")
async def add_applicant(message: Message, state: FSMContext):
    await state.set_state(adding.last_name)
    await message.answer(f"–≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã –º–æ–∂–∏—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=by_buttons_kb(["‚ùå–æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]))

@router.message(F.text == "‚ùå–æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(GREATING_MESSAGE, reply_markup=main_kb)


    
@router.message(F.text == "üë•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤")
async def view_applicants(message: Message, state: FSMContext):
    await message.answer("""
–≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é


                            """, reply_markup= by_buttons_kb(["–∑–∞–≤–µ—Ä—à–∏—Ç—å"]))
    await state.set_state(chek.last_name)

@router.message(chek.last_name)
async def view_applicants_by_id(message: Message, state :FSMContext):
    try:
        await message.answer(f"{get_applicant_by_last_name(message.text)}")
    except:
        await message.answer("–≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ")
    if message.text == "–∑–∞–≤—Ä—à–∏—Ç—å":
        await state.clear()
        await message.answer("–≤—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=main_kb)



